
#pragma once

#include <QtCore/QString>


namespace SIMPL
{
  namespace PyBind11
  {      
      /**
       * @brief Returns the path to the RUNTIME_OUTPUT_DIR which should be the "Bin"
       * directory inside the build directory. Note when building with a multi-configuration
       * IDE such as Visual Studio or Xcode there is another directory level past that.
       * @return
       */
      static const QString RuntimeOutputDir("@GeneratePythonBindings_RUNTIME_OUTPUT_DIR@");

      /**
       * @brief Returns the path to where the Python C++ modules will be created.
       * @return 
       */
      static const QString LibraryOutputDirectory("@SIMPLPyBind11_LIBRARY_OUTPUT_DIR@");
  
      /**
       * @brief TemplateDir
       * @return 
       */
      static const QString TemplateDir("@SIMPLPyBind11_SOURCE_DIR_NORM@/Templates");

      /**
       * @brief PythonWrappingDir
       * @return 
       */
      static const QString PythonWrappingDir("@SIMPL_PYB11_PARENT_DIR@");
      
      /**
       * @brief PythonModuleSuffix
       */
      static const QString PythonModuleSuffix("@SIMPL_PYTHON_MODULE_SUFFIX@");
      
      /**
       * @brief SIMPL_LibraryName
       */
      static const QString SIMPL_LibraryName("@SIMPL_PYTHON_MODULE_NAME@");

      static const QString SIMPLProjBinaryDir("@SIMPLProj_BINARY_DIR@");

      static const QString BuildDirectory("@CMAKE_LIBRARY_OUTPUT_DIRECTORY@");

      static const QString TestDirectory("@SIMPLProj_BINARY_DIR@/Testing");

      static const QString TestTempDirectory("@SIMPLProj_BINARY_DIR@/Testing/Temporary");

      static const QString DataDirectory("@DREAM3D_DATA_DIR@");
  }
  
}
